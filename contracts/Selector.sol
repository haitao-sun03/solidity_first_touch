// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

contract FunSelector {

    function getSelector(string calldata fun) external pure returns(bytes4) {
        // return bytes4(keccak256(bytes(fun)));
        // why using 16进制 表示 bytes4是8位: 
        // bytes4是4个字节,即4*8=32位二进制,4个二进制数可以表示为1个十六进制数
        // 比如:0001 -> 1,1000 ->8
        // 所以32/4=8
        return bytes4(keccak256(bytes(fun)));
    }
// 0xc9762ec20000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
// 0xc9762ec20000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
    event Log(bytes data);

    // 函数选择器,EVM就是通过msg.data来判断函数签名与参数值的
    function receiver(address _addr,uint amount) external {
        emit Log(msg.data);
        // 0x9db0ba39
        // 0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2
        // ab8483f64d9c6d1ecf9b849ae677dd3315835cb2
        // 0000000000000000000000000000000000000000000000000000000000000001
    }

    function sumIfEvenAndLessThan99(uint[] calldata arr) external {
        emit Log(msg.data);
    }
}